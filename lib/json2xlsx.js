"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var escape=_interopDefault(require("lodash.escape")),JSZip=_interopDefault(require("jszip")),FileSaver=_interopDefault(require("file-saver"));const CELL_TYPE_STRING="string",CELL_TYPE_NUMBER="number",validTypes=["string","number"],MISSING_KEY_FILENAME="Json2xlsx config missing property filename",INVALID_TYPE_FILENAME="Json2xlsx filename can only be of type string",INVALID_TYPE_SHEET="Json2xlsx sheet data is not of type array",INVALID_TYPE_SHEET_DATA="Json2xlsx sheet data childs is not of type array",WARNING_INVALID_TYPE='Invalid type supplied in cell config, falling back to "string"',childValidator=(e=[])=>e.every(e=>Array.isArray(e));var validator=e=>{if(!e.filename)return console.error(MISSING_KEY_FILENAME),!1;if("string"!=typeof e.filename)return console.error(INVALID_TYPE_FILENAME),!1;if(!Array.isArray(e.sheets))return console.error(INVALID_TYPE_SHEET),!1;for(let t=0;t<e.sheets.length;t+=1)if(!childValidator(e.sheets[t].data))return console.error(INVALID_TYPE_SHEET_DATA),!1;return!0};const generateColumnLetter=e=>{if("number"!=typeof e)return"";const t=Math.floor(e/26),o=String.fromCharCode(97+e%26).toUpperCase();return 0===t?o:generateColumnLetter(t-1)+o};var generatorCellNumber=(e,t)=>`${generateColumnLetter(e)}${t}`,generatorStringCell=(e,t,o)=>`<c r="${generatorCellNumber(e,o)}" t="inlineStr"><is><t>${escape(t)}</t></is></c>`,generatorNumberCell=(e,t,o)=>`<c r="${generatorCellNumber(e,o)}"><v>${t}</v></c>`,formatCell=(e,t,o)=>(-1===validTypes.indexOf(e.type)&&(console.warn(WARNING_INVALID_TYPE),e.type="string"),"string"===e.type?generatorStringCell(t,e.value,o):generatorNumberCell(t,e.value,o)),formatRow=(e,t)=>{const o=t+1,s=e.map((e,t)=>formatCell(e,t,o)).join("");return`<row r="${o}">${s}</row>`},generatorRows=e=>e.map((e,t)=>formatRow(e,t)).join("");const DEFAULT='<sheet state="visible" name="Sheet1" sheetId="1" r:id="rId3"/>',createSheets=e=>e&&0!==e.lenght?e.map(({name:e},t)=>`<sheet state="visible" name="${e||""}" sheetId="${t}" r:id="rId${t+1}"/>`):DEFAULT,buildWorkBook=e=>`<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n        <workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" \n            xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" \n            xmlns:mx="http://schemas.microsoft.com/office/mac/excel/2008/main"\n            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \n            xmlns:mv="urn:schemas-microsoft-com:mac:vml" \n            xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" \n            xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" \n            xmlns:xm="http://schemas.microsoft.com/office/excel/2006/main">\n            <workbookPr/>\n            <sheets>\n                ${createSheets(e)}\n            </sheets>\n            <definedNames/>\n            <calcPr/>\n            </workbook>`,createRelationShips=e=>{const t=[];for(let o=0;o<e;o+=1)t.push(`<Relationship Id="rId${o+1}" Target="worksheets/sheet${o+1}.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet"/>`);return t},buildRelationship=e=>`<?xml version="1.0" ?>\n    <Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n        ${createRelationShips(e)}\n    </Relationships>`;var rels='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/></Relationships>',contentTypes='<?xml version="1.0" ?>\n<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n<Default ContentType="application/xml" Extension="xml"/>\n<Default ContentType="application/vnd.openxmlformats-package.relationships+xml" Extension="rels"/>\n<Override ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" PartName="/xl/worksheets/sheet1.xml"/>\n<Override ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" PartName="/xl/workbook.xml"/>\n</Types>',templateSheet='<?xml version="1.0" ?>\n<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mv="urn:schemas-microsoft-com:mac:vml" xmlns:mx="http://schemas.microsoft.com/office/mac/excel/2008/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns:xm="http://schemas.microsoft.com/office/excel/2006/main"><sheetData>{placeholder}</sheetData></worksheet>';const generateXMLWorksheet=e=>{const t=generatorRows(e);return templateSheet.replace("{placeholder}",t)};var json2xlsx=e=>{if(!validator(e))throw new Error("Validation failed.");const t=new JSZip,o=t.folder("xl");return o.file("workbook.xml",buildWorkBook(e.sheets)),o.file("_rels/workbook.xml.rels",buildRelationship(e.sheets.length)),t.file("_rels/.rels",rels),t.file("[Content_Types].xml",contentTypes),(e.sheets||[]).forEach((e,t)=>{const s=generateXMLWorksheet(e.data);o.file(`worksheets/sheet${t+1}.xml`,s)}),t.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}).then(t=>{FileSaver.saveAs(t,`${e.filename}.xlsx`)})};exports.generateXMLWorksheet=generateXMLWorksheet,exports.default=json2xlsx;
